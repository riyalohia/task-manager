{"version":3,"sources":["Header.js","components/Server/index.js","components/serverList/index.js","components/waitingList/index.js","components/index.js","App.js","serviceWorker.js","index.js"],"names":["style","display","alignItems","margin","width","marginLeft","Header","background","src","alt","Server","id","ideal","updateServer","React","useState","progress","setProgress","useEffect","interval","setInterval","clearInterval","marginBottom","className","size","ProgressBar","now","ServerList","servers","updateServerList","onUpdateServer","shadow","marginTop","paddingLeft","paddingRight","maxHeight","overflowY","map","serverInfo","ind","WaitingList","list","onDeleteWaitingTask","task","label","icon","onClick","e","TaskManager","setServers","waitingList","setWaitingList","totalTasks","setTotalTasks","tasks","setTasks","initialRender","isMountRef","useRef","current","useIsMount","length","serversList","slice","index","findIndex","server","waitingListCopy","splice","appearance","concat","disabled","name","type","onChange","event","Number","target","value","tasksArray","i","push","weight","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f87ca7ea.chunk.js","sourcesContent":["import React from 'react';\n\nconst style = {\n  display: 'flex',\n  alignItems: 'center',\n  margin: '10px 0',\n  width: 'fit-content',\n  marginLeft: '40px'\n};\n\nconst Header = () => (\n  <div style={{ display: 'grid', background: 'black' }}>\n    <div style={style}>\n      <img\n        src=\"https://uploads-ssl.webflow.com/5cf8fb6198b9ff614cfbd521/5cf8fb6198b9ff1c89fbd566_logo_h.png\"\n        width=\"159\"\n        alt=\"logo\"\n      />\n    </div>\n  </div>\n);\n\nexport default Header;","import React from 'react';\nimport './Server.css';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport { Heading, Text } from '@innovaccer/design-system';\n\nconst Server = ({ id, ideal, updateServer }) => {\n  const [progress, setProgress] = React.useState(0);\n\n  React.useEffect(() => {\n    if (!ideal) {\n      const interval = setInterval(() => {\n        if (progress <= 100) {\n          const value = progress + 5;\n          setProgress(value);\n        }\n      }, 1000);\n      if (updateServer && progress > 100) {\n        updateServer(id);\n        setProgress(0);\n      }\n      return () => clearInterval(interval);\n    }\n  }, [ideal, progress]);\n\n  return (\n    <div style={{marginBottom: '20px'}}>\n      <div className='Server-heading'><Heading size='m'>{`Server ${id + 1}`}</Heading></div>\n      <ProgressBar now={progress} />\n      <Text>{progress / 5 < 10 ? `00:0${progress / 5}` : `00:${progress / 5}`}</Text>\n    </div>\n  )\n};\n\nexport default Server;","import React from 'react';\nimport Server from '../Server';\nimport { Card } from '@innovaccer/design-system';\n\nconst ServerList = ({ servers, updateServerList }) => {\n\tconst CardStyle = {\n\t\tmarginTop: '10px',\n\t\tpaddingLeft: '20px',\n\t\tpaddingRight: '20px',\n\t\tmaxHeight: '300px',\n\t\toverflowY: 'scroll'\n\t};\n\n\tconst onUpdateServer = (id) => {\n\t\tif (updateServerList) updateServerList(id);\n\t}\n\n\treturn (\n\t\t<Card shadow='medium' style={CardStyle}>\n\t\t\t{\n\t\t\t\tservers.map((serverInfo, ind) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Server\n\t\t\t\t\t\t\tid={ind}\n\t\t\t\t\t\t\tideal={serverInfo.ideal}\n\t\t\t\t\t\t\tupdateServer={onUpdateServer}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})\n\t\t\t}\n\t\t</Card>\n\t);\n};\n\nexport default ServerList;","import React from 'react';\nimport './WaitingList.css';\nimport { Heading, Card, Button } from '@innovaccer/design-system';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\n\nconst WaitingList = ({ list, onDeleteWaitingTask }) => {\n\tconst CardStyle = {\n\t\tmarginTop: '20px',\n\t\tpaddingLeft: '20px',\n\t\tpaddingRight: '20px',\n\t\tmaxHeight: '300px',\n\t\toverflowY: 'scroll'\n\t};\n\n\tconst onDeleteTask = (event, id) => {\n\t\tif (onDeleteWaitingTask) onDeleteWaitingTask(id);\n\t};\n\n\treturn (\n\t\t<Card shadow='medium' style={CardStyle}>\n\t\t\t{\n\t\t\t\tlist.map((task, ind) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t<div className='WaitingList-heading'><Heading size='m'>{task}</Heading></div>\n\t\t\t\t\t\t\t<div className='WaitingList-progress'>\n\t\t\t\t\t\t\t\t<ProgressBar now={0} label={'waiting..'} />\n\t\t\t\t\t\t\t\t<Button icon='delete' onClick={e => onDeleteTask(e, ind)} />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)\n\t\t\t\t})\n\t\t\t}\n\t\t</Card>\n\t)\n};\n\nexport default WaitingList;","import React from 'react';\nimport './TaskManager.css';\nimport { Button, Input, Text } from '@innovaccer/design-system';\nimport ServerList from './serverList';\nimport WaitingList from './waitingList';\n\nexport const useIsMount = () => {\n  const isMountRef = React.useRef(true);\n  React.useEffect(() => {\n    isMountRef.current = false;\n  }, []);\n  return isMountRef.current;\n};\n\nconst TaskManager = () => {\n  const [servers, setServers] = React.useState([]);\n  const [waitingList, setWaitingList] = React.useState([]);\n  const [totalTasks, setTotalTasks] = React.useState(0);\n  const [tasks, setTasks] = React.useState(0);\n\n  const initialRender = useIsMount();\n\n  // Assign Task to Server when server is free or new task is added\n  React.useEffect(() => {\n    if (!initialRender) {\n      if (waitingList.length > 0) {\n        const serversList = servers.slice();\n        const index = serversList.findIndex(server => server.ideal === true);\n\n        if (index >= 0) {\n          const waitingListCopy = waitingList.slice();\n          waitingListCopy.splice(0, 1);\n          serversList[index].ideal = false;\n          setWaitingList(waitingListCopy);\n          setServers(serversList);\n        }\n      }\n    }\n  }, [servers, waitingList]);\n\n  const onAddServer = () => {\n    const serversList = servers.concat({ ideal: true });\n    setServers(serversList);\n  };\n\n  const onRemoveServer = () => {\n    const serversList = servers.slice();\n    const index = serversList.length - 1;\n    serversList.splice(index, 1);\n\n    setServers(serversList);\n  };\n\n  const onAddTasks = () => {\n    const tasksArray = [];\n    for (let i = 0; i < tasks; i++) {\n      tasksArray.push(`Waiting Task ${waitingList.length + i + 1}`);\n    };\n\n    const list = waitingList.concat(tasksArray);\n    setTotalTasks(tasks + totalTasks);\n    setWaitingList(list);\n  };\n\n  const onUpdateServerList = (index) => {\n    const serversList = servers.slice();\n    serversList[index].ideal = true;\n    setServers(serversList);\n  }\n\n  const onDeleteWaitingTask = (index) => {\n    const waitingListCopy = waitingList.slice();\n    waitingListCopy.splice(index, 1);\n    setWaitingList(waitingListCopy);\n    setTotalTasks(totalTasks - 1);\n  }\n\n  const onChangeInput = (event) => {\n    setTasks(Number(event.target.value));\n  };\n\n  return (\n    <div className='TaskManager'>\n      <div className='TaskManager-wrapper'>\n        <div className='TaskManager-button'>\n          <Button appearance='primary' onClick={onAddServer}>Add Server</Button>\n          <Button\n            appearance='primary'\n            onClick={onRemoveServer}\n            disabled={servers.length > 0 && !servers[servers.length - 1].ideal}\n          >\n            Remove Server\n          </Button>\n        </div>\n        <div className='TaskManager-input'>\n          <Input\n            name=\"input\"\n            type=\"number\"\n            onChange={onChangeInput}\n          />\n          <Button appearance='primary' onClick={onAddTasks}>Add Tasks</Button>\n        </div>\n      </div>\n      <div className='TaskManager-info'>\n        {totalTasks > 0 && (\n          <div>\n            <Text weight='strong' appearance='subtle'>Total Tasks: {totalTasks}</Text>\n            <Text weight='strong' appearance='subtle'>Completed Tasks: {totalTasks - waitingList.length}</Text>\n            <Text weight='strong' appearance='subtle'>Waiting Tasks: {waitingList.length}</Text>\n          </div>\n        )}\n      </div>\n      <ServerList\n        servers={servers}\n        updateServerList={onUpdateServerList}\n      />\n      <WaitingList\n        list={waitingList}\n        onDeleteWaitingTask={onDeleteWaitingTask}\n      />\n    </div>\n  );\n}\n\nexport default TaskManager;","import React from 'react';\nimport '@innovaccer/design-system/css';\nimport Header from './Header';\nimport TaskManager from './components';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <TaskManager />\n    </div >\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}